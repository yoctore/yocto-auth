{
    "project": {
        "name": "yocto-api",
        "description": "Yocto REST API ",
        "version": "0.1.1",
        "url": "http://www.yocto.re"
    },
    "files": {
        "src/app/models/controller.js": {
            "name": "src/app/models/controller.js",
            "modules": {},
            "classes": {
                "ModelController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/app/models/crud-methods.js": {
            "name": "src/app/models/crud-methods.js",
            "modules": {},
            "classes": {
                "Crud": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/app/routes/controller.js": {
            "name": "src/app/routes/controller.js",
            "modules": {},
            "classes": {
                "RouteController": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ModelController": {
            "name": "ModelController",
            "shortname": "ModelController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/models/controller.js",
            "line": 12,
            "description": "Yocto API : Models Controller\n\nController of models, laod models from a json file\n\nAll models are save in an array and are accessible by calling method getModel\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- mongoose : http://mongoosejs.com/\n- glob : https://www.npmjs.com/package/glob\n- fs : https://nodejs.org/api/fs.html\n- path : https://nodejs.org/api/path.html",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        },
        "Crud": {
            "name": "Crud",
            "shortname": "Crud",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/models/crud-methods.js",
            "line": 16,
            "description": "Yocto API : crud methods Controller\n\nController that give default methods\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/",
            "date": ": 22/09/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        },
        "RouteController": {
            "name": "RouteController",
            "shortname": "RouteController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/app/routes/controller.js",
            "line": 27,
            "description": "Yocto API : Routes Controller\n\nController of routes based on Express\n\nIt read a jsonfile and create each routenode\n\nCors Express is enable to permit test with apidocjs\n\nFor more details on these dependencies read links below :\n- LodAsh : https://lodash.com/\n- yocto-logger : git+ssh://lab.yocto.digital:yocto-node-modules/yocto-utils.git\n- express : http://expressjs.com/\n- joi : https://github.com/hapijs/joi",
            "date": ": 11/05/2015",
            "author": ": Cedric Balard <cedric@yocto.re>",
            "copyright": ": Yocto SAS, All right reserved"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/app/models/controller.js",
            "line": 34,
            "description": "Array of Object that contains all models found in folder",
            "itemtype": "property",
            "name": "tabModel",
            "type": "Array of Object",
            "default": "empty",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 43,
            "description": "Load mongoose controller to execute operation on database",
            "itemtype": "property",
            "name": "mongoose",
            "type": "{Object}",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 51,
            "description": "Default yocto-logger",
            "itemtype": "property",
            "name": "logger",
            "type": "{Object}",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 60,
            "description": "Add model in @tabModel\nIf model.fn isn't empty, all methods specified will be added in model.methods",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "model",
                    "description": "the current model found in json file",
                    "type": "Object"
                },
                {
                    "name": "pathModels",
                    "description": "path of the current model on server",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if current model was added in tabModel, otherwise false",
                "type": "Boolean"
            },
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 111,
            "description": "Initialise the Controller</br>\nRetrieve all json file in folder 'pathModels' and load all models",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "pathModels",
                    "description": "Path of the folder that contains all model '.json'",
                    "type": "String"
                }
            ],
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 140,
            "description": "Get model from tabModel",
            "params": [
                {
                    "name": "nameModel",
                    "description": "the name of model to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return false if model not found otherwise return the model",
                "type": "Boolean"
            },
            "class": "ModelController"
        },
        {
            "file": "src/app/models/controller.js",
            "line": 164,
            "description": "Export current Controller to use it on node",
            "class": "ModelController"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 6,
            "description": "List of all default property in a mongodb document <br>\nThis list define all property that we don't want retrive",
            "itemtype": "property",
            "name": "DEFAULT_PROP_MONGODB",
            "type": "array",
            "default": "[ '__v', '_id']",
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 31,
            "description": "Object that contains the current model",
            "itemtype": "property",
            "name": "model",
            "type": "Object",
            "default": "empty",
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 41,
            "description": "Function that get element in db",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "THe id or antoher object to Retrieve in db",
                    "type": "Objet, String"
                }
            ],
            "return": {
                "description": "return a promise",
                "type": "Function"
            },
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 75,
            "description": "Delete an object in db",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the item should be delete",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return a promise",
                "type": "Function"
            },
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 100,
            "description": "Create an object in db",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "data",
                    "description": "the data to create object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "return a promise",
                "type": "Function"
            },
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 145,
            "description": "Update an object in db",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "id",
                    "description": "the id of object",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the new data",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "the http method that use this function (PUT or PATCH)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return a promise",
                "type": "Function"
            },
            "class": "Crud"
        },
        {
            "file": "src/app/models/crud-methods.js",
            "line": 188,
            "description": "Initialise object, set model",
            "params": [
                {
                    "name": "model",
                    "description": "the Mongoose Model",
                    "type": "Object"
                }
            ],
            "class": "Crud"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 48,
            "description": "List of all http request that supported by api",
            "itemtype": "property",
            "name": "ALL_HTTP_REQUESTS",
            "type": "Array of String",
            "default": "[ 'post', 'get', 'put', 'patch', 'delete', 'head']",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 57,
            "description": "Model's Controller, is the controller that will use to retrieve a model",
            "itemtype": "property",
            "name": "models",
            "type": "Object",
            "default": "require '../models/controller.js'",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 66,
            "description": "The main router",
            "itemtype": "property",
            "name": "router",
            "type": "Object",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 74,
            "description": "The main logger",
            "itemtype": "property",
            "name": "logger",
            "type": "Object",
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 83,
            "description": "Add a route to the main router",
            "itemtype": "method",
            "name": "addRoute",
            "params": [
                {
                    "name": "pathRequest",
                    "description": "route to add",
                    "type": "String"
                },
                {
                    "name": "nameModel",
                    "description": "name of the model object to retrieve into the controller of model",
                    "type": "String"
                },
                {
                    "name": "reqExcluded",
                    "description": "array of excluded request",
                    "type": "Array"
                },
                {
                    "name": "param",
                    "description": "name of the param to retrieve",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "the current route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If success return true, otherwise false",
                "type": "Boolean"
            },
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 103,
            "description": "Implement the http request : GET and HEAD</br>\nGet an object </br>\nSend a error to the client if the request failed, or a json file to the client with the data requested if it's an GET requerst </br>\nOR if it's a head request, send a http header",
            "itemtype": "method",
            "name": "addHTTPRequestGets",
            "params": [
                {
                    "name": "model",
                    "description": "the data model object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "the root path",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "The property to retrieve on url",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 232,
            "description": "Implement the http request : POST </br>\nAdd a new Object in DB </br>\nSend a error to the client if the request failed, otherwise a json file to the client with the data",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "Model",
                    "description": "the data model object (Model start with an uppercase for jshint validation)",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The root path of model",
                    "type": "String"
                }
            ],
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 315,
            "description": "Initialise the controller </br>\nRetrieve all routes and thoose alias and add there into router",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "pathRoutes",
                    "description": "the path of the file route.json",
                    "type": "String"
                },
                {
                    "name": "pathModels",
                    "description": "the path of folder that contains all models.json",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If success return true, otherwise false",
                "type": "Boolean"
            },
            "class": "RouteController"
        },
        {
            "file": "src/app/routes/controller.js",
            "line": 392,
            "description": "Export current Controller to use it on node",
            "class": "RouteController"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: date",
            "line": " src/app/models/controller.js:12"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/models/controller.js:12"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/models/crud-methods.js:16"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/models/crud-methods.js:16"
        },
        {
            "message": "unknown tag: date",
            "line": " src/app/routes/controller.js:27"
        },
        {
            "message": "unknown tag: copyright",
            "line": " src/app/routes/controller.js:27"
        },
        {
            "message": "Missing item type\nGet model from tabModel",
            "line": " src/app/models/controller.js:140"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/models/controller.js:164"
        },
        {
            "message": "Missing item type\nInitialise object, set model",
            "line": " src/app/models/crud-methods.js:188"
        },
        {
            "message": "Missing item type\nExport current Controller to use it on node",
            "line": " src/app/routes/controller.js:392"
        }
    ]
}